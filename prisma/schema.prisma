generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String           @id @default(uuid())
  username       String
  email          String           @unique
  password       String
  role           ROLE             @default(USER)
  status         USER_STATUS      @default(INACTIVE)
  Template       Template[]
  Answer         Answer[]
  Comment        Comment[]
  Likes          Likes[]
  Form           Form[]
  TemplateAccess TemplateAccess[]
  createdAt      DateTime         @default(now())
  Question       Question[]
}

model Template {
  id             String           @id @default(uuid())
  title          String           @default("")
  topic          String
  description    String
  image          String?
  type           FORM_TYPE
  userId         String
  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  tags           Tags[]           @relation("TemplateTags")
  createdAt      DateTime         @default(now())
  Question       Question[]
  Comment        Comment[]
  Likes          Likes[]
  Form           Form[]
  TemplateAccess TemplateAccess[]
}

model Tags {
  id        String     @id @default(uuid())
  name      String
  templates Template[] @relation("TemplateTags")
}

model TemplateAccess {
  id         String   @id @default(uuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  templateId String
  template   Template @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@unique([templateId, userId])
}

model Form {
  id         String   @id @default(uuid())
  templateId String
  template   Template @relation(fields: [templateId], references: [id], onDelete: Cascade)
  userId     String?
  user       User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  answer     Answer[]
  createdAt  DateTime @default(now())
}

model Question {
  id          String               @id @default(uuid())
  sequence    Int
  title       String
  description String
  type        QUESTION_ANSWER_TYPE
  isPublished Boolean
  templateId  String
  template    Template             @relation(fields: [templateId], references: [id], onDelete: Cascade)
  createdById String?
  createdBy   User?                @relation(fields: [createdById], references: [id], onDelete: Cascade)
  Answer      Answer[]
  Options     Options[]
}

model Answer {
  id                     String                   @id @default(uuid())
  sequence               Int
  answer                 String
  questionId             String
  question               Question                 @relation(fields: [questionId], references: [id], onDelete: Cascade)
  userId                 String?
  user                   User?                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  formId                 String
  form                   Form                     @relation(fields: [formId], references: [id], onDelete: Cascade)
  selectedOptions        Options[]                @relation("AnswerOptions")
  selectedOptionOnAnswer SelectedOptionOnAnswer[]
}

model Options {
  id                     String                   @id @default(uuid())
  questionId             String
  question               Question                 @relation(fields: [questionId], references: [id], onDelete: Cascade)
  answers                Answer[]                 @relation("AnswerOptions")
  title                  String
  selectedOptionOnAnswer SelectedOptionOnAnswer[]
}

model SelectedOptionOnAnswer {
  answerId   String
  optionId   String
  isSelected Boolean @default(false)

  answer Answer  @relation(fields: [answerId], references: [id], onDelete: Cascade)
  option Options @relation(fields: [optionId], references: [id], onDelete: Cascade)

  @@id([answerId, optionId])
}

model Comment {
  id         String   @id @default(uuid())
  context    String
  userId     String?
  user       User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  templateId String
  template   Template @relation(fields: [templateId], references: [id], onDelete: Cascade)
}

model Likes {
  id         String   @id @default(uuid())
  userId     String?
  user       User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  templateId String
  template   Template @relation(fields: [templateId], references: [id], onDelete: Cascade)
}

enum ROLE {
  ADMIN
  USER
}

enum FORM_TYPE {
  PUBLIC
  PRIVATE
}

enum QUESTION_ANSWER_TYPE {
  OPEN
  MULTICHOICE
  CLOSE
  NUMERICAL
}

enum USER_STATUS {
  ACTIVE
  INACTIVE
  BLOCKED
}
